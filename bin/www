#!/usr/bin/env node

//cluster
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;
const sleep = require('util').promisify(setTimeout);

//crawler app
const db = require('../database.js');
const DatasetModel = require('../models/dataset.js');
const Crawler = require('../src/crawler.js');


/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('archiver:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

if (cluster.isMaster) {
  console.log(`Master ${process.pid} is running`);

  // Fork workers.
  for (let i = 0; i < numCPUs; i++) {
    cluster.fork();
  }

  
  //start crawlers distributed on clusters at init
  DatasetModel.getDatasets()
    .then(async (datasets) => {
      let wL = Object.keys(cluster.workers).length;
      let dL = datasets.length;

      //set up all datasets for the workers
      let counter = 1;
      for (let i = 0; i < dL; i++) {
        for (let w = 1; w < wL + 1; w++) {
          if (counter == w) {
            cluster.workers[w].send(datasets[i].url);
            await sleep(20);
            if (counter < wL) counter++;
            else counter = 1;
            break;
          }
        }

      }
    })
    .catch(err => {
      console.error(err)
    })

  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
} else {
  // Workers can share any TCP connection
  // In this case it is an HTTP server

  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  process.on('message', (url) => {
    let crawler = new Crawler(url);
    console.log(`${process.pid} started: ${crawler}`)
  });

  console.log(`Worker ${process.pid} started`);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}